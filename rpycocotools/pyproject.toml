[build-system]
requires = ["maturin>=0.14,<0.15"]
build-backend = "maturin"

[project]
name = "rpycocotools"
version = "0.0.6"
authors = [{name="Bagard Hoel"}]
description = "Package providing utilities to load, manipulate, convert and visualize COCO format datasets."
keywords = ["COCO", "COCO dataset"]
readme = "README.md"
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Programming Language :: Rust",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]
license = {text="MIT"}
dependencies = ["numpy>=1.21.0", "rpycocotools-stubs"]
requires-python = ">=3.8"

[project.urls]
"Source Code" = "https://github.com/hoel-bagard/rust_coco_tools"

[tool.maturin]
sdist-include = ["LICENSE", "README.md"]
python-source = "python"
module-name = "rpycocotools._rpycocotools"
# bindings = "cffi"
# compatibility = "linux"

[project.optional-dependencies]
build = ["maturin"]
test = ["pytest", "hypothesis"]
dev = ["pip-tools", "ruff", "pyright"]
doc = ["sphinx", "sphinx-rtd-theme", "sphinx-hoverxref", "sphinx-codeautolink"]
flake8 = [
    "flake8>=5.0.4,<6.0",
    "flake8-bugbear>=23.3.12,<24.0",
    "flake8-builtins>=2.1.0,<3.0",
    "flake8-comprehensions>=3.12.0,<4.0",
    "flake8-docstrings>=1.7.0,<2.0",
    "flake8-quotes>=3.3.2,<4",
    "pep8-naming>=0.13.3",
    "flake8-import-order>=0.18.2",
    "flake8-noqa>=1.3.1,<2",
    "flake8-broken-line>=0.6.0",
    "flake8-commas>=2.1.0,<3.0",
    "Flake8-pyproject>=1.2.3,<2"
]

[tool.pytest.ini_options]
# https://docs.pytest.org/en/7.1.x/explanation/goodpractices.html
addopts = [
    "--import-mode=importlib",
    "--strict-markers",
]

[tool.ruff]
select = ["ALL"]
exclude = ["docs/conf.py"]
line-length = 120

[tool.ruff.isort]
order-by-type = false
known-first-party = ["rpycocotools"]

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.pylint]
max-args = 10

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"python/rpycocotools/anns.py" = ["D101", "F403", "F405"]
"tests/**/*.py" = ["D1", "INP001", "PLR2004", "S101"]

[tool.pyright]
include = ["tests"]
ignore = ["python"]
pythonVersion = "3.11"
pythonPlatform = "Linux"

strictListInference = true
strictDictionaryInference = true
strictSetInference = true
reportMissingModuleSource = false
reportMissingImports = true
reportMissingTypeStubs = false
reportUnusedImport = true
reportUnusedClass = "warning"
reportUnusedFunction = "warning"
reportUnusedVariable = "warning"
reportDuplicateImport = "warning"
reportUntypedNamedTuple = "warning"
reportUntypedFunctionDecorator = "warning"
reportUntypedClassDecorator = "warning"
reportMissingSuperCall = false
reportUnknownArgumentType = "warning"
reportUnknownLambdaType = "warning"
reportUnknownVariableType = "warning"
reportUnknownMemberType = false
reportMissingParameterType = "warning"
reportMissingTypeArgument = "warning"
reportCallInDefaultInitializer = false
reportUnnecessaryIsInstance = "warning"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"
reportImplicitStringConcatenation = false
reportUnusedCallResult = false
reportUnusedExpression = "warning"
reportUnnecessaryTypeIgnoreComment = "warning"
reportMatchNotExhaustive = "warning"

[tool.flake8]
application_import_names = "rpycocotools"
exclude = ["env", "venv", "docs"]
max-line-length = 120
docstring-convention = "google"
import-order-style = "smarkets"
inline-quotes = "double"
# D1: Missing docstring
# I100: Import statements are in the wrong order.
# I201: Missing newline between import groups.
# F401: imported but unused
per-file-ignores = [
    "tests/*.py:D1,I201,I100",
    "python/rpycocotools/__init__.py:F401,I100,NQA102",
    "python/rpycocotools/anns.py:D101,F403,F405"
]

[tool.pylint.messages_control]
max-line-length = 120
disable = [
    "import-error",
    "no-name-in-module",
]
