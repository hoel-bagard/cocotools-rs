[build-system]
requires = ["maturin>=0.14,<0.15"]
build-backend = "maturin"

[project]
name = "rpycocotools"
version = "0.0.3"
authors = [{name="Bagard Hoel"}]
description = "Package providing utilities to load, manipulate, convert and visualize COCO format datasets."
keywords = ["COCO", "COCO dataset"]
readme = "README.md"
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Programming Language :: Rust",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]
license = {text="MIT"}
dependencies = ["numpy", "rpycocotools-stubs==0.0.3"]
requires-python = ">=3.8"

[project.urls]
"Source Code" = "https://github.com/hoel-bagard/rust_coco_tools"

[tool.maturin]
sdist-include = ["LICENSE", "README.md"]
# bindings = "cffi"
# compatibility = "linux"

[project.optional-dependencies]
build = ["maturin"]
test = ["pytest", "hypothesis"]
dev = ["pip-tools", "ruff", "pyright"]

[tool.pytest.ini_options]
# https://docs.pytest.org/en/7.1.x/explanation/goodpractices.html
addopts = [
    "--import-mode=importlib",
    "--strict-markers",
]

[tool.ruff]
select = ["A", "B", "C4", "D", "E", "F", "N", "I", "Q", "UP", "ANN", "S", "BLE", "COM", "DTZ", "PIE", "PT", "RSE", "SIM", "ARG", "PTH", "PL", "TRY", "NPY", "RUF", "W"]
ignore = ["D1", "D401", "D204", "D203", "D213", "S101", "PLR2004"]
line-length = 120

[tool.ruff.isort]
order-by-type = false

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.pylint]
max-args = 10

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.pyright]
include = ["tests"]

strictListInference = true
strictDictionaryInference = true
strictSetInference = true

reportMissingModuleSource = false
reportMissingImports = true
reportMissingTypeStubs = false
reportUnusedImport = true
reportUnusedClass = "warning"
reportUnusedFunction = "warning"
reportUnusedVariable = "warning"
reportDuplicateImport = "warning"
reportUntypedNamedTuple = "warning"
reportUntypedFunctionDecorator = "warning"
reportUntypedClassDecorator = "warning"
reportMissingSuperCall = false
reportUnknownArgumentType = "warning"
reportUnknownLambdaType = "warning"
reportUnknownVariableType = "warning"
reportUnknownMemberType = false
reportMissingParameterType = "warning"
reportMissingTypeArgument = "warning"
reportCallInDefaultInitializer = false
reportUnnecessaryIsInstance = "warning"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"
reportImplicitStringConcatenation = false
reportUnusedCallResult = false
reportUnusedExpression = "warning"
reportUnnecessaryTypeIgnoreComment = "warning"
reportMatchNotExhaustive = "warning"

pythonVersion = "3.10"
pythonPlatform = "Linux"
